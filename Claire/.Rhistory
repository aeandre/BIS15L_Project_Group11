select(genus, abundance) %>%
group_by(genus) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance))
microbiome %>%
select(genus, abundance) %>%
group_by(genus) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance))
microbiome %>%
select(genus, abundance) %>%
group_by(genus) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
top_n(20)
microbiome %>%
select(genus, abundance) %>%
group_by(genus) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
top_n(20) %>%
ggplot(aes(x = genus, y = mean_abundance))+
geom_raster()
microbiome %>%
select(genus, abundance) %>%
group_by(genus) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
top_n(20) %>%
ggplot(aes(x = genus, y = mean_abundance))+
geom_tile(aes(fill = mean_abundance))
ggplot(aes(x = genus)+
ggplot(aes(x = genus)+
microbiome %>%
select(genus, abundance) %>%
group_by(genus) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
top_n(20) %>%
ggplot(aes(x = genus)+
geom_tile(aes(fill = mean_abundance))
microbiome %>%
microbiome %>%
select(genus, abundance) %>%
group_by(genus) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
top_n(20) %>%
ggplot(aes(x = genus))+
geom_tile(aes(fill = mean_abundance))
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
top_n(20) %>%
ggplot(aes(x = genus, y = condition))+
geom_tile(aes(fill = mean_abundance))
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
top_n(20)
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
top_n(20)
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 200) %>%
ggplot(aes(x = genus, y = condition))+
geom_tile(aes(fill = mean_abundance))
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 100) %>%
ggplot(aes(x = genus, y = condition))+
geom_tile(aes(fill = mean_abundance))
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 1000) %>%
ggplot(aes(x = genus, y = condition))+
geom_tile(aes(fill = mean_abundance))
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 100) %>%
ggplot(aes(x = genus, y = condition))+
geom_tile(aes(fill = mean_abundance))
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 100) %>%
ggplot(aes(x = genus, y = condition))+
geom_raster(aes(fill = mean_abundance), interpolate = T)
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 100) %>%
ggplot(aes(x = genus, y = condition))+
geom_raster(aes(fill = mean_abundance))
my_col <- c("navy", "blue", "green", "yellow")
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 100) %>%
ggplot(aes(x = genus, y = condition))+
geom_raster(aes(fill = mean_abundance))+
scale_fill_gradient(colors = my_col)
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 100) %>%
ggplot(aes(x = genus, y = condition))+
geom_raster(aes(fill = mean_abundance))+
scale_fill_gradientn(colors = my_col)
microbiome %>%
select(genus, abundance, condition) %>%
group_by(genus, condition) %>%
summarise(mean_abundance = mean(abundance, na.rm = T)) %>%
arrange(desc(mean_abundance)) %>%
filter(mean_abundance > 100) %>%
ggplot(aes(x = genus, y = condition))+
geom_raster(aes(fill = mean_abundance))+
scale_fill_gradientn(colors = my_col)+
coord_flip()
microbiome_wide <- microbiome %>%
pivot_wider(names_from = "condition", values_from = "abundance")
microbiome_wide
microbiome
microbiome_wide <- microbiome %>%
pivot_wider(names_from = "condition", values_from = "abundance")
microbiome_wide <- microbiome %>%
pivot_wider(names_from = "condition", values_from = "abundance", values_fn = list)
microbiome_wide
microbiome_wide <- microbiome %>%
pivot_wider(names_from = "condition", values_from = "abundance")
microbiome_wide <- microbiome %>%
pivot_wider(names_from = "condition", values_from = "abundance", values_fn = length)
microbiome_wide
microbiome_wide %>%
filter(a = 1 | b =1)
microbiome_wide %>%
filter(a == 1 | b ==1)
microbiome_wide %>%
filter(a == 2 | b ==2)
microbiome %>%
filter(genus == "Prevotella")
microbiome %>%
filter(genus == "Prevotella", patient_id == 114)
microbiome_wide <- microbiome %>%
filter(species != NA)
microbiome_wide <- microbiome %>%
filter(species != NA) %>%
pivot_wider(names_from = "condition", values_from = "abundance", values_fn = length)
microbiome_wide
microbiome %>%
filter(species != NA)
microbiome %>%
filter(species != "NA")
microbiome_wide <- microbiome %>%
filter(species != "NA") %>%
pivot_wider(names_from = "condition", values_from = "abundance")
microbiome_wide <- microbiome %>%
filter(species != "NA") %>%
pivot_wider(names_from = "condition", values_from = "abundance", values_fn = length)
microbiome_wide
microbiome_wide %>%
filter(a == 2 | b ==2)
microbiome %>%
filter(genus == "Prevotella", patient_id == 3)
microbiome %>%
filter(genus == "Prevotella", patient_id == 5)
microbiome %>%
filter(genus == "Prevotella", patient_id == 31)
microbiome %>%
filter(genus == "Prevotella", patient_id == 2)
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = input$y, fill = input$y) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admission by Year", x = NULL, y = input$y)+
coord_flip()
})
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("y", "Select Admissions Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = input$y, fill = input$y) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admission by Year", x = NULL, y = input$y)+
coord_flip()
})
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = input$y, fill = input$y) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admission by Year", x = NULL, y = input$y)+
coord_flip()
)
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("y", "Select Admissions Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = input$y, fill = input$y) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admission by Year", x = NULL, y = input$y)+
coord_flip()
)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("y", "Select Admissions Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = input$y, fill = input$y) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admission by Year", x = NULL, y = input$y)+
coord_flip()
})
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select Admissions Variable", choices = c("academic_yr", "campus", "category"),
selected = "academic_yr"),
hr()),
mainPanel(
plotOutput("UCEthnicity")
)
)
)
server <- function(input, output) {
output$UCEthnicity <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x=input$x, y = "filtered_count_fr", fill = "ethnicity")) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admission by Ethnicity", x = NULL, y = "Count")+
coord_flip()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("y", "Select Admissions Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = input$y, fill = input$y) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)
})
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("y", "Select Admissions Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = input$y, fill = input$y)) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)
})
}
shinyApp(ui, server)
names(uc_admit)
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr", fill = input$y)) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("y", "Select Admissions Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr", fill = input$y)) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select Admissions Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr", fill = input$x)) +
geom_col(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admissions by Year", x = input$x, y= "count")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("UC Campus Admissions"),
sidebarLayout(
sidebarPanel(
selectInput("x", "Select Admissions Variable", choices = c("ethnicity", "campus", "category"),
selected = "ethnicity"),
hr()),
mainPanel(
plotOutput("UCAdmissions")
)
)
)
server <- function(input, output) {
output$UCAdmissions <- renderPlot({
uc_admit %>%
filter(ethnicity != "All") %>%
ggplot(aes_string(x = "academic_yr", y = "filtered_count_fr", fill = input$x)) +
geom_point(position = "dodge")+
theme_minimal()+
scale_fill_manual(values = my_palette)+
labs(title = "UC Admissions by Year", x = input$x, y= "count")
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
getwd()
library(tidyverse)
library(janitor)
library(here)
library(naniar)
asd_microbiome <- read_csv("C:/Users/Claire Chapman/Desktop/BIS15L_Project_Group11/untidy_data/ASD meta abundance 2.csv")
asd_microbiome <- janitor::clean_names(asd_microbiome)
names(asd_microbiome)
asd_microbiome
asd_microbiome_longer <- asd_microbiome %>%
pivot_longer(-taxonomy, names_to = "condition", values_to = "abundance")%>%
filter(str_detect(taxonomy, "Unclassified") == FALSE)
asd_microbiome_longer
asd_microbiome_tidy_strains <- asd_microbiome_tidy %>%
separate(species, into = c("species", "strain"), sep = " sp. ")
asd_microbiome_tidy <- asd_microbiome_longer %>%
separate(taxonomy, into = c("trash", "taxonomy"), sep = "s__") %>%
select(-trash)
asd_microbiome_tidy
asd_microbiome_tidy_strains <- asd_microbiome_tidy %>%
separate(taxonomy, into = c("taxonomy", "strain"), sep = " sp. ")
asd_microbiome_tidy_strains
asd_microbiome_tidy_strains <- asd_microbiome_longer %>%
separate(taxonomy, into = c("taxonomy", "strain"), sep = " sp. ") %>%
separate(taxonomy, into = c("genus", "species"), sep = )
asd_microbiome_tidy_strains
asd_microbiome_tidy_strains <- asd_microbiome_longer %>%
separate(taxonomy, into = c("taxonomy", "strain"), sep = " sp. ") %>%
separate(taxonomy, into = c("genus", "species"), sep = " " )
asd_microbiome_tidy_strains
asd_microbiome_tidy <- asd_microbiome_longer %>%
separate(condition, into = c("condition", "patient_id"), sep = 1) %>%
separate(taxonomy, into = c("trash", "species"), sep = "s__") %>%
separate(species, into = c("genus", "species"), sep = " ")
asd_microbiome_tidy_strains <- asd_microbiome_tidy %>%
separate(taxonomy, into = c("taxonomy", "strain"), sep = " sp. ") %>%
separate(taxonomy, into = c("genus", "species"), sep = " " )
asd_microbiome_tidy_strains <- asd_microbiome_tidy %>%
separate(taxonomy, into = c("species", "strain"), sep = " sp. ") %>%
separate(taxonomy, into = c("genus", "species"), sep = " " )
asd_microbiome_tidy_strains <- asd_microbiome_tidy %>%
separate(species, into = c("species", "strain"), sep = " sp. ") %>%
separate(taxonomy, into = c("genus", "species"), sep = " " )
asd_microbiome_tidy
asd_microbiome_tidy <- asd_microbiome_longer %>%
separate(condition, into = c("condition", "patient_id"), sep = 1) %>%
separate(taxonomy, into = c("trash", "species"), sep = "s__") %>%
separate(species, into = c("species", "strain"), sep = " sp. ") %>%
separate(species, into = c("genus", "species"), sep = " ")
asd_microbiome_tidy
asd_microbiome_tidy <- asd_microbiome_longer %>%
separate(condition, into = c("condition", "patient_id"), sep = 1) %>%
separate(taxonomy, into = c("genus", "species"), sep = ";s__") %>%
separate(genus, into = c("trash", "genus"), sep = "__") %>%
separate(species, into = c("species", "strain"), sep = " sp. ") %>%
separate(species, into = c("genus", "species"), sep = " ")
asd_microbiome_tidy
asd_microbiome_tidy <- asd_microbiome_longer %>%
separate(condition, into = c("condition", "patient_id"), sep = 1) %>%
separate(taxonomy, into = c("genus", "species"), sep = ";s__") %>%
separate(genus, into = c("trash", "genus"), sep = "__") %>%
separate(species, into = c("species", "strain"), sep = " sp. ") %>%
separate(species, into = c("extra_genus", "species"), sep = " ")
asd_microbiome_tidy
asd_microbiome_tidy3 <- asd_microbiome_tidy_strains %>%
mutate(cultured = ifelse(extra_genus == "uncultured", FALSE, TRUE)) %>%
select(- extra_genus, - trash)
asd_microbiome_tidy3 <- asd_microbiome_tidy %>%
mutate(cultured = ifelse(extra_genus == "uncultured", FALSE, TRUE)) %>%
select(- extra_genus, - trash)
view(asd_microbiome_tidy3)
asd_microbiome_tidy3
asd_microbiome_tidy4 <- asd_microbiome_tidy3 %>%
mutate(species = ifelse(species == genus, NA, species))
view(asd_microbiome_tidy4)
asd_microbiome_tidy4 %>%
filter(species == "copri")
