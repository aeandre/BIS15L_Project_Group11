<<<<<<< Updated upstream
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit_no_all %>%
ggplot(aes(x=year, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
=======
session$onSessionEnded(stopApp)
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
library("palmerpenguins")
if (!require("tidyverse")) install.packages('tidyverse')
#Very helpful code to add to standalone version of app. This is helpful because instead of only using library, do require
#require(janitor)
#BUT if janitor isn't installed, require will install and library call that app for people.
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
sidebarLayout(
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
mainPanel(
plotOutput("taxonPlot")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
sidebarLayout(
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
mainPanel(
plotOutput("taxonPlot")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
UC_admit <- read_csv(here("data/UC_admit.csv")) %>% clean_names()
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
UC_admit <- read_csv(here("data/UC_admit.csv")) %>% clean_names()
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
glimpse(UC_admit)
dim(UC_admit)
names(UC_admit)
sapply(UC_admit, class)
naniar::miss_var_summary(UC_admit)
UC_admit %>%
summarize(number_nas = sum(is.na(UC_admit)))
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
?rm.na
??rm.na
?na.rm
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point(na.rm = T)+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
UC_admit %>%
ggplot(aes(x = ethnicity, fill = category))+
geom_bar(position = "dodge")
UC_admit %>%
ggplot(aes(x = ethnicity, fill = filtered_count_fr))+
geom_bar(position = "dodge")
UC_admit %>%
ggplot(aes(x = ethnicity, fill = perc_fr))+
geom_bar(position = "dodge")
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point(na.rm = T)+
labs(title = "#Ethnicity vs. Filtered Count",
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
glimpse(UC_admit)
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point(na.rm = T)+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
library(shiny)
ui <- fluidPage(titlePanel("Admissions By Ethnicity For UC Campuses"),
radioButtons("x", "Select Fill Variable", choices = c("ethnicity", "filtered_count_fr", "campus"), selected = "ethnicity"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "ethnicity", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#Type in shinyapp for this option to pop up
#Spelling really counts on choices = c()!
#Sometimes code wont run because of a missing parenthesis, so watch out for those!
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = "locomotion", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable") #Removing X and Y axis
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.") #This references where data came from
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
>>>>>>> Stashed changes
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "ethnicity"),
<<<<<<< Updated upstream
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
=======
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "campus"),
>>>>>>> Stashed changes
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
<<<<<<< Updated upstream
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
=======
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.") #This references where data came from
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Admissions By Ethnicity For UC Campuses"),
radioButtons("x", "Select Fill Variable", choices = c("ethnicity", "filtered_count_fr", "campus"), selected = "ethnicity"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "ethnicity", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable")
>>>>>>> Stashed changes
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
<<<<<<< Updated upstream
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 0.5)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 0.25)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 0)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 0.1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr(label=TRUE, abbr=TRUE), y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count",
color = "Ethnicity") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c(2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
=======
>>>>>>> Stashed changes
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
<<<<<<< Updated upstream
selectInput("x", "Select X Variable", choices = c("academic_yr"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
=======
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "campus"),
>>>>>>> Stashed changes
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
<<<<<<< Updated upstream
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
=======
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
>>>>>>> Stashed changes
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
<<<<<<< Updated upstream
=======
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
>>>>>>> Stashed changes
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
<<<<<<< Updated upstream
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
=======
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "campus"),
>>>>>>> Stashed changes
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
<<<<<<< Updated upstream
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
=======
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
>>>>>>> Stashed changes
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
<<<<<<< Updated upstream
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
=======
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "filtered_count_fr"), selected = "campus"),
>>>>>>> Stashed changes
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
<<<<<<< Updated upstream
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
=======
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
>>>>>>> Stashed changes
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
<<<<<<< Updated upstream
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
=======
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "filtered_count_fr"),
>>>>>>> Stashed changes
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
<<<<<<< Updated upstream
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+ scale_fill_trek("romulan")
=======
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
>>>>>>> Stashed changes
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
<<<<<<< Updated upstream
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity)))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity)))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity)))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 0)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity)))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+ scale_fill_trek("romulan")
=======
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "ethnicity")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(palmerpenguins)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
UC_admit <- read_csv(here("lab13/data/UC_admit.csv")) %>% clean_names()
glimpse(UC_admit)
dim(UC_admit)
names(UC_admit)
sapply(UC_admit, class)
naniar::miss_var_summary(UC_admit)
UC_admit %>%
summarize(number_nas = sum(is.na(UC_admit)))
UC_admit %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+geom_point(na.rm = T)+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
View(UC_admit)
UC_admit %>%
ggplot(aes(x=ethnicity, fill=filtered_count_fr))+
geom_bar()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
UC_admit %>%
ggplot(aes(x=ethnicity, fill=perc_fr))+
geom_bar()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
UC_admit %>%
ggplot(aes(x=ethnicity, fill=filtered_count_fr))+
geom_bar()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
library(shiny)
ui <- fluidPage(titlePanel("Admissions By Ethnicity For UC Campuses"),
radioButtons("x", "Select Fill Variable", choices = c("ethnicity", "filtered_count_fr", "campus"), selected = "ethnicity"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "ethnicity", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable")
>>>>>>> Stashed changes
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
<<<<<<< Updated upstream
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
=======
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "filtered_count_fr"),
>>>>>>> Stashed changes
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
<<<<<<< Updated upstream
ggplot(UC_admit_no_all, aes_string(x = factor(input$x), y = input$y, fill= factor("ethnicity"))) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+ scale_fill_trek("romulan")
=======
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
>>>>>>> Stashed changes
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
<<<<<<< Updated upstream
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = factor(input$x), y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
=======
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "ethnicity")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, col = "ethnicity")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
>>>>>>> Stashed changes
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
<<<<<<< Updated upstream
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
runApp('~/Desktop/GitHub/BIS15W2021_bdegroen/lab13/13_HW#3.R')
runApp('~/Desktop/GitHub/BIS15W2021_bdegroen/lab13/13_HW#2.R')
library(tidyverse)
library(ggmap)
library(lubridate)
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
library(tidyverse)
library(ggmap)
library(lubridate)
repeat {
commands
if(condition) { #This is the break condition
break
}
}
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop. "Repeat process until x >= 10
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index (It's like an x in the previous example)
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100  #Taking value inside [] is specific value of data frame. Store that value +100 into new value as a new column.
i <- i + 1
if(i > 2) {
break
}
}
data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
=======
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Admissions By Ethnicity For UC Campuses"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: https://www.universityofcalifornia.edu/infocenter") #This references where data came from
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
library(shiny)
ui <- fluidPage(titlePanel("Admissions By Ethnicity For UC Campuses"),
radioButtons("x", "Select Fill Variable", choices = c("ethnicity", "filtered_count_fr", "campus"), selected = "ethnicity"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "ethnicity", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit %>%
ggplot(aes(x=filtered_count_fr, fill=ethnicity))+
geom_bar()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
UC_admit %>%
ggplot(aes(x=ethnicity, fill=filtered_count_fr))+
geom_bar()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
asd <- read_csv(here("ASD meta abundance 2.csv"))
getwd()
asd <- read_csv(here("ASD meta abundance 2.csv"))
setwd("~/Desktop/GitHub/BIS15L_Project_Group11/Berlin")
getwd()
asd <- read_csv(here("ASD meta abundance 2.csv"))
asd <- read_csv(here("ASD meta abundance 2.csv"))
asd <- read_csv(here("ASD meta abundance 2.csv"))
asd <- read_csv(here("ASD meta abundance 2.csv"))
>>>>>>> Stashed changes
