shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light()
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit_no_all %>%
ggplot(aes(x=year, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_fill_trek("romulan")
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 0.5)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 0.25)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 0)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 0.1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr(label=TRUE, abbr=TRUE), y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count",
color = "Ethnicity") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c(2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+
scale_fill_trek("romulan")
UC_admit_no_all %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr, fill = ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity)))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity)))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 1)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity)))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 0)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
UC_admit_no_all %>%
ggplot(aes(x=factor(academic_yr), y=filtered_count_fr, fill = factor(ethnicity)))+
geom_col(position = "dodge")+
labs(title = "Ethnicity vs. Filtered Count",
x = "Year",
y = "Filtered Count") +
theme(axis.text.x = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+
scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020"))+
scale_fill_trek("romulan")
#Not sure why X axis labels here are missing
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = factor(input$x), y = input$y, fill= factor("ethnicity"))) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = factor(input$x), y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
runApp('~/Desktop/GitHub/BIS15W2021_bdegroen/lab13/13_HW#3.R')
runApp('~/Desktop/GitHub/BIS15W2021_bdegroen/lab13/13_HW#2.R')
library(tidyverse)
library(ggmap)
library(lubridate)
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
library(tidyverse)
library(ggmap)
library(lubridate)
repeat {
commands
if(condition) { #This is the break condition
break
}
}
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop. "Repeat process until x >= 10
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index (It's like an x in the previous example)
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100  #Taking value inside [] is specific value of data frame. Store that value +100 into new value as a new column.
i <- i + 1
if(i > 2) {
break
}
}
data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
