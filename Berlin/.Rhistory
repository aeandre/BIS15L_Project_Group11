selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
=======
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "filtered_count_fr"),
>>>>>>> Stashed changes
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
<<<<<<< Updated upstream
ggplot(UC_admit_no_all, aes_string(x = factor(input$x), y = input$y, fill= factor("ethnicity"))) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+ scale_fill_trek("romulan")
=======
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
>>>>>>> Stashed changes
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
<<<<<<< Updated upstream
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = factor(input$x), y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_x_discrete(breaks = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), labels=c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category"), selected = "academic_yr"),
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit_no_all, aes_string(x = input$x, y = input$y, fill= "ethnicity")) + geom_col(position = "dodge") + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))+ scale_fill_trek("romulan")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
shinyApp(ui, server)
=======
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "ethnicity")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "ethnicity"),
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"),
selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, col = "ethnicity")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
>>>>>>> Stashed changes
ui <- dashboardPage(
dashboardHeader(title = "Admissions By Ethnicity For UC Campuses"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "ethnicity"),
<<<<<<< Updated upstream
selectInput("y", "Select Y Variable", choices = c("filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
runApp('~/Desktop/GitHub/BIS15W2021_bdegroen/lab13/13_HW#3.R')
runApp('~/Desktop/GitHub/BIS15W2021_bdegroen/lab13/13_HW#2.R')
library(tidyverse)
library(ggmap)
library(lubridate)
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
library(tidyverse)
library(ggmap)
library(lubridate)
repeat {
commands
if(condition) { #This is the break condition
break
}
}
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop. "Repeat process until x >= 10
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index (It's like an x in the previous example)
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100  #Taking value inside [] is specific value of data frame. Store that value +100 into new value as a new column.
i <- i + 1
if(i > 2) {
break
}
}
data1
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
=======
selectInput("y", "Select Y Variable", choices = c("academic_yr", "campus", "category", "ethnicity", "filtered_count_fr"), selected = "filtered_count_fr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, color="ethnicity")) + geom_point() + theme_light()+ theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Admissions By Ethnicity For UC Campuses"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: https://www.universityofcalifornia.edu/infocenter") #This references where data came from
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
library(shiny)
ui <- fluidPage(titlePanel("Admissions By Ethnicity For UC Campuses"),
radioButtons("x", "Select Fill Variable", choices = c("ethnicity", "filtered_count_fr", "campus"), selected = "ethnicity"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "ethnicity", fill = input$x))+
geom_bar(position = "dodge", alpha = 0.8, color = "black")+
theme_light(base_size = 18)+
labs(x=NULL, y=NULL, fill = "Fill Variable")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit %>%
ggplot(aes(x=filtered_count_fr, fill=ethnicity))+
geom_bar()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
UC_admit %>%
ggplot(aes(x=ethnicity, fill=filtered_count_fr))+
geom_bar()+
labs(title = "#Ethnicity vs. Filtered Count",
x = "Ethnicity",
y = "Filtered Count") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
asd <- read_csv(here("ASD meta abundance 2.csv"))
getwd()
asd <- read_csv(here("ASD meta abundance 2.csv"))
setwd("~/Desktop/GitHub/BIS15L_Project_Group11/Berlin")
getwd()
asd <- read_csv(here("ASD meta abundance 2.csv"))
asd <- read_csv(here("ASD meta abundance 2.csv"))
asd <- read_csv(here("ASD meta abundance 2.csv"))
asd <- read_csv(here("ASD meta abundance 2.csv"))
>>>>>>> Stashed changes
library(tidyverse)
library(janitor)
library(here)
library(naniar)
library(ggvenn)
library(VennDiagram)
getwd()
ref_tidier_microbiome <- read_csv(here("Berlin/c_ref_tidiermicrobiome.csv"))
knitr::opts_chunk$set(echo = TRUE)
getwd()
library(tidyverse)
library(janitor)
library(here)
library(naniar)
c_ref_asd_microbiome <- read_csv(here("Berlin/ASD meta abundance 2 copy.csv"))
c_ref_asd_microbiome <- janitor::clean_names(c_ref_asd_microbiome)
c_ref_asd_microbiome_longer <- c_ref_asd_microbiome %>%
pivot_longer(-taxonomy, names_to = "condition", values_to = "abundance")%>%
filter(str_detect(taxonomy, "Unclassified") == FALSE)
c_ref_asd_microbiome_longer
c_ref_asd_microbiome_tidy <- c_ref_asd_microbiome_longer %>%
separate(condition, into = c("condition", "patient_id"), sep = 1) %>%
separate(taxonomy, into = c("genus", "species"), sep = ";s__") %>%
separate(genus, into = c("trash", "genus"), sep = "__") %>%
separate(species, into = c("species", "strain"), sep = " sp. ") %>%
separate(species, into = c("extra_genus", "species"), sep = " ")
c_ref_asd_microbiome_tidy
c_ref_asd_microbiome_tidy3 <- c_ref_asd_microbiome_tidy %>%
mutate(cultured = ifelse(extra_genus == "uncultured", FALSE, TRUE)) %>%
select(- extra_genus, - trash)
c_ref_asd_microbiome_tidy3
c_ref_asd_microbiome_tidy4 <- c_ref_asd_microbiome_tidy3 %>%
mutate(species = ifelse(species == genus, NA, species))
view(c_ref_asd_microbiome_tidy4)
c_ref_asd_microbiome_tidy4 %>%
filter(species == "copri")
write.csv(c_ref_asd_microbiome_tidy4, file = "c_ref_tidiermicrobiome.csv", row.names = FALSE)
ref_tidier_microbiome <- read_csv(here("Berlin/c_ref_tidiermicrobiome.csv"))
a_ref_asd_tidier_microbiome <- read_csv(here("Berlin/a_ref_asd_group.csv"))
knitr::opts_chunk$set(echo = TRUE)
write.csv(asd_tidy4, file = "a_ref_microbiome.csv", row.names = FALSE)
write.csv(td_group, file = "a_ref_td_group.csv", row.names = FALSE)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
a_ref_asd_tidier_microbiome <- read_csv(here("Berlin/a_ref_asd_group.csv"))
a_ref_asd_tidier_microbiome <- read_csv(here("Berlin/a_ref_asd_group copy.csv"))
a_ref_asd_tidier_microbiome
a_ref_td_tidier <- read_csv(here("Berlin/a_ref_td_group.csv"))
a_ref_td_tidier <- read_csv(here("Berlin/Copy_files_csv/a_ref_td_group.csv"))
a_ref_td_tidier <- read_csv(here("Berlin/Copy_files_csv/a_ref_td_group copy.csv"))
a_ref_td_tidier
ref_td_venn <-
a_ref_td_tidier %>%
rename(genus_td = "genus") %>%
filter(abundance != 0) %>%
select(genus_td, id)
ref_asd_venn <-
a_ref_asd_tidier_microbiome %>%
rename(genus_asd = "genus") %>%
filter(abundance != 0)
both_venn <- full_join(ref_td_venn, ref_asd_venn, by = "id")
both_venn
both_venn$genus_td <- as.factor(both_venn$genus_td)
both_venn$genus_asd <- as.factor(both_venn$genus_asd)
both_venn2 <-
both_venn %>%
filter(genus_td != "NA" | genus_asd != "NA")
ref_venn_data <- list(
"TD Genera" = both_venn2$genus_td,
"ASD Genera" = both_venn2$genus_asd
)
ggvenn(ref_venn_data, fill_color = c("yellow", "turquoise1"))
grid.newpage()
draw.pairwise.venn(area1 = 1264,
area2 = 1101,
cross.area = 1068,
fill = c("yellow", "turquoise1"),
category = c("TD Genera", "ASD Genera"))
unique_names <- c("TD group", "ASD Group")
unique_counts <- c(196, 33)
unique_genera <- data_frame(unique_names, unique_counts)
unique_genera
unique_genera %>%
ggplot(aes(x = unique_names, y = unique_counts, fill = unique_names)) +
geom_col(color = "black") +
scale_fill_manual(values = c("turquoise1", "yellow")) +
theme_linedraw() +
labs(title = "Number of Unique Genera Per Group",
x = NULL,
y = "Unique Genera") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
write.csv(unique_genera, file = "unique_genera.csv", row.names = FALSE)
both_venn$condition <- str_to_upper(both_venn$condition, locale = "en")
both_venn$condition <- str_to_upper(both_venn$condition)
View(c_ref_asd_microbiome)
View(c_ref_asd_microbiome_tidy4)
View(c_ref_asd_microbiome_tidy3)
View(c_ref_asd_microbiome)
View(c_ref_asd_microbiome_longer)
View(c_ref_asd_microbiome_tidy)
View(c_ref_asd_microbiome_tidy)
View(c_ref_asd_microbiome_tidy3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
asd <- readr::read_csv("ASD_meta_abundance_2.csv")
asd <- readr::read_csv("Berlin/Copy_files_csv/ASD meta abundance 2.csv")
asd <- readr::read_csv("Berlin/Copy_files_csv/ASD meta abundance 2 copy.csv")
asd <- readr::read_csv("Berlin/Copy_files_csv/ASD meta abundance 2.csv")
asd <- readr::read_csv("Copy_files_csv/ASD meta abundance 2.csv")
asd
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
asd <- readr::read_csv("Copy_files_csv/ASD meta abundance 2.csv")
asd
asd_tidy <- asd %>%
pivot_longer(-Taxonomy,
names_to = "subject",
values_to = "abundance") %>%
separate(subject, into = c("group", "number"), sep = 1)
asd_tidy
asd_tidy2 <- asd_tidy %>%
filter(str_detect(Taxonomy, "Unclassified") == FALSE)
asd_tidy2
asd_tidy3 <-
asd_tidy2 %>%
separate(Taxonomy, into = c("genus", "species"), sep = ";")
asd_tidy4 <-
asd_tidy3 %>%
separate(genus, into = c("g", "genus"), sep = "__") %>%
separate(species, into = c("s", "species"), sep = "__") %>%
select( -g, -s) %>%
rename(id = "number")
asd_tidy4
asd_tidy4$genus <- as.factor(asd_tidy4$genus)
asd_tidy4$species <- as.factor(asd_tidy4$species)
asd_tidy4$id <- as.factor(asd_tidy4$id)
asd_group <-
asd_tidy4 %>%
filter(group == "B")
asd_group
td_group <-
asd_tidy4 %>%
filter(group == "A")
td_group
td_diversity <- td_group %>%
filter(abundance != 0) %>%
summarize(n_genus = n_distinct(genus), n_species = n_distinct(species))
td_diversity
asd_diversity <-
asd_group %>%
filter(abundance != 0) %>%
summarize(n_genus = n_distinct(genus), n_species = n_distinct(species))
asd_diversity
group <- c("td", "asd")
microbiome_diversity <-
full_join(td_diversity, asd_diversity) %>%
cbind(group) %>%
select(group, n_genus, n_species)
microbiome_diversity
microbiome_diversity %>%
ggplot(aes(x = group, y = n_genus, fill = group)) +
geom_col() +
theme_linedraw() +
labs(title = "Number of Genera per Group",
x = "Group",
y = "Number of Genera") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5)) +
scale_fill_brewer(palette = "Set1")
microbiome_diversity %>%
ggplot(aes(x = group, y = n_species, fill = group)) +
geom_col() +
theme_linedraw() +
labs(title = "Number of Species per Group",
x = "Group",
y = "Number of Species") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5)) +
scale_fill_brewer(palette = "Set1")
write.csv(asd_tidy4, file = "microbiome.csv", row.names = FALSE)
write.csv(asd_group, file = "asd_group.csv", row.names = FALSE)
write.csv(td_group, file = "td_group.csv", row.names = FALSE)
tidier_microbiome <- readr::read_csv("/Users/allyandre/Desktop/BIS15L_Project_Group11/tidy_data/tidiermicrobiome.csv")
tidier_microbiome <- readr::read_csv("tidy_data/c_ref_tidiermicrobiome.csv")
tidier_microbiome <- readr::read_csv("Copy_files_csv/c_ref_tidiermicrobiome.csv")
tidier_microbiome
asd_group_tidier <-
tidier_microbiome %>%
filter(condition =="b")
asd_group_tidier
td_group_tidier <-
tidier_microbiome %>%
filter(condition == "a")
td_group_tidier
write.csv(td_group_tidier, file = "td_group_tidier.csv", row.names = FALSE)
write.csv(asd_group_tidier, file = "asd_group_tidier.csv", row.names = FALSE)
demographics <- readr::read_csv("Copy_files_csv/demographics copy.csv")
demographics
demographics2 <-
demographics %>%
clean_names() %>%
filter(metagenomic_sequencing == "Yes") %>%
select(sample_id, gender, age)
demographics2
write.csv(demographics2, file = "demographics_tidy.csv", row.names = FALSE)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
library(ggvenn)
library(VennDiagram)
getwd()
ref_tidier_microbiome <- read_csv(here("Berlin/c_ref_tidiermicrobiome.csv"))
ref_tidier_microbiome <- read_csv(here("Berlin/Copy_files_csv/c_ref_tidiermicrobiome.csv"))
a_ref_asd_tidier_microbiome <- read_csv(here("Berlin/Copy_files_csv/a_ref_asd_group copy.csv"))
a_ref_asd_tidier_microbiome
a_ref_td_tidier <- read_csv(here("Berlin/Copy_files_csv/a_ref_td_group copy.csv"))
a_ref_td_tidier
ref_td_venn <-
a_ref_td_tidier %>%
rename(genus_td = "genus") %>%
filter(abundance != 0) %>%
select(genus_td, id)
ref_asd_venn <-
a_ref_asd_tidier_microbiome %>%
rename(genus_asd = "genus") %>%
filter(abundance != 0)
both_venn <- full_join(ref_td_venn, ref_asd_venn, by = "id")
both_venn
both_venn$genus_td <- as.factor(both_venn$genus_td)
both_venn$genus_asd <- as.factor(both_venn$genus_asd)
both_venn2 <-
both_venn %>%
filter(genus_td != "NA" | genus_asd != "NA")
both_venn2 <-
both_venn %>%
filter(genus_td != "NA" | genus_asd != "NA")
ref_venn_data <- list(
"TD Genera" = both_venn2$genus_td,
"ASD Genera" = both_venn2$genus_asd
)
ggvenn(ref_venn_data, fill_color = c("yellow", "turquoise1"))
grid.newpage()
draw.pairwise.venn(area1 = 1264,
area2 = 1101,
cross.area = 1068,
fill = c("yellow", "turquoise1"),
category = c("TD Genera", "ASD Genera"))
unique_names <- c("TD group", "ASD Group")
unique_counts <- c(196, 33)
unique_genera <- data_frame(unique_names, unique_counts)
unique_genera
unique_genera %>%
ggplot(aes(x = unique_names, y = unique_counts, fill = unique_names)) +
geom_col(color = "black") +
scale_fill_manual(values = c("turquoise1", "yellow")) +
theme_linedraw() +
labs(title = "Number of Unique Genera Per Group",
x = NULL,
y = "Unique Genera") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
write.csv(unique_genera, file = "unique_genera.csv", row.names = FALSE)
both_venn$condition <- str_to_upper(both_venn$condition)
ref_tidier_microbiome <- read_csv(here("Berlin/Copy_files_csv/c_ref_tidiermicrobiome.csv"))
View(ref_tidier_microbiome)
View(ref_tidier_microbiome)
both_venn$condition <- str_to_upper(both_venn$condition)
ref_tidier_microbiome <- read_csv(here("Berlin/Copy_files_csv/c_ref_tidiermicrobiome.csv"))
both_venn$condition <- str_to_upper(both_venn$condition)
both_venn <- as.data.frame(both_venn)
ref_tidier_microbiome <- as.data.frame(ref_tidier_microbiome)
both_venn$condition <- str_to_upper(both_venn$condition)
both_venn$condition <- join(both_venn$condition)
both_venn$condition <- full_join(both_venn$condition)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(here)
library(naniar)
library(ggvenn)
library(VennDiagram)
library(shiny)
library(shinydashboard)
library(trekcolors)
library(ggplot2)
